{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","sortType","isReversed","visibleGoods","sort","a","b","localeCompare","length","reverse","console","log","App","useState","setReverse","setSortType","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAeK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,SAAUC,EACZ,EADYA,WAGNC,EAAY,YAAOH,GAEzB,OAAQC,GACN,KAAK,EACHE,EAAaC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MACF,KAAK,EACHH,EAAaC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEG,OAASF,EAAEE,UAa7C,OARIN,GACFC,EAAaM,UAKfC,QAAQC,IAAIV,EAAUC,GAEfC,G,SArCJN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA8CE,IAAMe,EAAgB,WAC3B,MAAiCC,oBAAS,GAA1C,mBAAOX,EAAP,KAAmBY,EAAnB,KACA,EAAgCD,mBAAS,GAAzC,mBAAOZ,EAAP,KAAiBc,EAAjB,KAEA,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAW,SACpB,UAAW,CAAE,WAAyB,IAAbjB,IAC3BkB,QAAS,kBAAMJ,EAAY,IAJ7B,iCASA,wBACEE,KAAK,SACLD,UAAWE,IAAW,SACpB,UAAW,CAAE,WAAyB,IAAbjB,IAC3BkB,QAAS,kBAAMJ,EAAY,IAJ7B,4BASA,wBACEE,KAAK,SACLD,UAAWE,IAAW,SACpB,UAAW,CAAE,YAA2B,IAAfhB,IAC3BiB,QAAS,kBAAML,GAAYZ,IAJ7B,sBASe,IAAbD,GAAkBC,IAClB,wBACEe,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPL,GAAW,GACXC,EAAY,IALhB,sBAaJ,6BACE,6BACGhB,EAAkBD,EACjB,CAAEG,WAAUC,eAAckB,KAAI,SAAAC,GAAI,OAEhC,aADF,CACE,MAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,cClHvBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b261d128.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case 1:\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n    case 2:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n    default:\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\n// type State = {\n//   isReversed: boolean,\n//   sortType: SortType,\n// };\n\nexport const App: React.FC = () => {\n  const [isReversed, setReverse] = useState(false);\n  const [sortType, setSortType] = useState(0);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames('button',\n            'is-info', { 'is-light': sortType !== 1 })}\n          onClick={() => setSortType(1)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button',\n            'is-info', { 'is-light': sortType !== 2 })}\n          onClick={() => setSortType(2)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames('button',\n            'is-info', { 'is-light': isReversed === false })}\n          onClick={() => setReverse(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== 0 || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setReverse(false);\n              setSortType(0);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {getReorderedGoods(goodsFromServer,\n            { sortType, isReversed }).map(good => (\n            // eslint-disable-next-line @typescript-eslint/indent\n              <li key={good} data-cy=\"Good\">{good}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}